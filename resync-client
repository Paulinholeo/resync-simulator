#!/usr/bin/python
"""
resync-client: The ResourceSync command line client

Created by Simeon Warner on 2012-04...
"""

import optparse

from resync.client import Client, ClientFatalError

def count_true_args(*args):
    """Count number of list of arguments that evaluate True"""
    count=0
    for arg in args:
        if (arg):
            count+=1
    return(count)

def main():
    
    # Options and arguments
    p = optparse.OptionParser(description='ResourceSync sync script', add_help_option=False)

    # Modes
    # a. modes using remote sitemap/resources
    rem = p.add_option_group('remote mode arguments',
        'These modes use a remote source that is specified in a set of uri=path mappings '\
        'and potentially also using an explicit --sitemap location. The default mode is '\
        '--sync')
    rem.add_option('--sync', '-s', action='store_true',
                   help='sync resources from remote source (src) to local filesystem (dst)')
    rem.add_option('--audit', '-a', action='store_true',
                   help="audit sync state of destination wrt source")
    rem.add_option('--parse', '-p', action='store_true',
                   help="just parse the remote sitemap (from mapping or explicit --sitemap)")
    # b. modes based solely on files on local disk
    loc = p.add_option_group('local mode arguments',
        'These modes act on files on the local disk  (default mode is --sync)')
    loc.add_option('--write', '-w', action='store_true',
                   help="write a sitemap based on files on disk using uri=path mappings "\
                        "in reverse to calculate URIs from the local paths. To STDOUT by "\
                        "default, override with --outfile")
    loc.add_option('--changeset', metavar="REFERENCE_SITEMAP", action='store',
                   help="write a changeset sitemap by comparion of files on disk with the "\
                        "reference sitemap. Otherwise follows --write options.")

    # Specification of map between remote URI and local file paths, and remote sitemap
    map = p.add_option_group('mapping from URI space to local files')
#    map.add_option('map', metavar='src|dst|uri=path', action='store', nargs='*',
#                     help='either 2 args: "source destination" or 1 or more uri=path mappings')
    map.add_option('--sitemap', type=str, action='store',
                     help='explicitly set sitemap name, overriding default sitemap.xml '\
                          'appended to first source URI specified in the mappings')

    # Options that apply to multiple modes
    opt = p.add_option_group('options')
    opt.add_option('--outfile', type=str, action='store',
                     help="write sitemap to specified file rather than STDOUT")
    opt.add_option('--checksum', '-c', action='store_true',
                     help="use checksum (md5) in addition to last modification time and size")
    opt.add_option('--delete', action='store_true',
                     help="allow files on destination to be deleted")
    opt.add_option('--multifile', '-m', action='store_true',
                     help="allow output of multifile sitemap")
    opt.add_option('--dryrun', '-n', action='store_true',
                     help="don't update local resources, say what would be done")
    # These likely only useful for experimentation
    opt.add_option('--max-sitemap-entries', type=int, action='store',
                     help="override default size limits")
    # Want these to show at the end
    opt.add_option('--verbose', '-v', action='store_true',
                     help="verbose")
    opt.add_option('--help', '-h', action='help',
                     help="this help")

    (args, map) = p.parse_args()

    # Implement exclusive arguments and default --sync (current support for exclusive
    # groups in argparse is incomplete)
    if (not args.sync and not args.audit and not args.parse and
        not args.write and not args.changeset):
        args.sync=True
    elif (count_true_args(args.sync,args.audit,args.parse,args.write)>1):
        p.error("Only one of --sync, --audit, --parse, --write, --changeset modes allowed")

    c = Client( checksum=args.checksum,
                verbose=args.verbose,
                dryrun=args.dryrun )
    try:
        # Mappings apply to (almost) everything
        if (map):
            c.set_mappings(map)
        if (args.sitemap):
            c.sitemap_name=args.sitemap

        # Finally, do something...
        if (args.sync or args.audit):
            c.sync_or_audit(allow_deletion=args.delete,
                            audit_only=args.audit)
        elif (args.parse):
            c.parse_sitemap(allow_multifile=args.multifile,
                            max_sitemap_entries=args.max_sitemap_entries)
        elif (args.write):
            c.write_sitemap(allow_multifile=args.multifile,
                            max_sitemap_entries=args.max_sitemap_entries,
                            outfile=args.outfile)
        elif (args.changeset):
            c.changeset_sitemap(allow_multifile=args.multifile,
                            max_sitemap_entries=args.max_sitemap_entries,
                            ref_sitemap=args.changeset,
                            outfile=args.outfile)
        else:
            p.error("Unknown mode requested")
    # Any problem we expect will come as a ClientFatalError, anything else 
    # is... an exception ;-)
    except ClientFatalError as e:
        p.error(e.message)

if __name__ == '__main__':
    main()
