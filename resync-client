#!/usr/bin/python
"""
resync-client: The ResourceSync command line client

Created by Simeon Warner on 2012-04...
"""

import argparse

from resync.client import Client, ClientFatalError
from resync.sitemap import Sitemap

def main():
    
    # Options and arguments
    p = argparse.ArgumentParser(description='ResourceSync sync script',add_help=False)

    rem = p.add_argument_group('remote mode arguments','The default mode is --sync')
    rem.add_argument('--sync', '-s', action='store_true', default=True,
                     help='sync resources from remote source (src) to local filesystem (dst)')
    rem.add_argument('--audit', '-a', action='store_true',
                     help="audit sync state of destination wrt source")
    rem.add_argument('--parse', '-p', metavar='uri', action='store',
                     help="parse a sitemap from the given uri")

    # Functions based on files on local disk
    loc = p.add_argument_group('local mode arguments','These modes act on files on the local disk  default mode is --sync')
    loc.add_argument('--sitemap', metavar='uri=path', type=str, action='store', nargs='*',
                     help="write out a sitemap based on files on disk using uri=path mappings")
#    loc.add_argument('--dump', metavar='uri=path', type=str, action='store', nargs='*',
#                     help="write out a dump based on files on disk using uri=path mappings")
    loc.add_argument('--basename', type=str, action='store',
                     help="write sitemap to disk rather than STDOUT")

    # Specification of map between remote URI and local file paths, and remote sitemap
    map = p.add_argument_group('mapping from URI space to local files')
    map.add_argument('src', type=str, action='store', nargs='?',
                     help='source')
    map.add_argument('dst', type=str, action='store', nargs='?',
                     help='destination')

    # Options that apply to multiple modes
    opt = p.add_argument_group('options')
    opt.add_argument('--checksum', '-c', action='store_true',
                     help="use checksum (md5) in addition to last modification time and size")
    opt.add_argument('--delete', action='store_true',
                     help="allow files on destination to be deleted")
    opt.add_argument('--multifile', '-m', action='store_true',
                     help="allow output of multifile sitemap")
    # These likely only useful for experimentation
    opt.add_argument('--max_sitemap_entries', type=int, action='store',
                     help="override default")
    # Want these to show at the end
    opt.add_argument('--verbose', '-v', action='store_true',
                     help="verbose")
    opt.add_argument('--help', '-h', action='help',
                     help="this help")

    args = p.parse_args()

    c = Client( checksum=args.checksum,
                verbose=args.verbose )
    try:
        if (args.sitemap):
            # Set up base_path->base_uri mappings, get inventory from disk
            c.set_mappings(mappings=args.sitemap)
            i = c.inventory

            s=Sitemap()
            s.mappings=c.mappings
            s.pretty_xml=True
            s.allow_multi_file=args.multifile
            # testing...
            if (args.max_sitemap_entries is not None):
                s.max_sitemap_entries = args.max_sitemap_entries

            if (args.basename is None):
                print s.inventory_as_xml(i)
            else:
                s.write(i,basename=args.basename)
        elif (args.parse):
            s=Sitemap()
            s.allow_multi_file=args.multifile
            i = s.read(args.parse)
            print "Read sitemap with %d entries in %d sitemaps... done" % (len(i),s.sitemaps_added)
            # FIXME - show some other information...
        else:
            # Either do sync or just audit
            if (args.src is None or args.dst is None):
                p.error("You must supply source and destination arguments")
            c.sync_or_audit(args.src, args.dst, 
                            allow_deletion=args.delete,
                            audit_only=args.audit)
    # Any problem we expect will come as a ClientFatalError, anything else 
    # is... an exception ;-)
    except ClientFatalError as e:
        p.error(e.message)

if __name__ == '__main__':
    main()
