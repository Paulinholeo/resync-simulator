#!/usr/bin/env python
# encoding: utf-8
"""
rs-simulator: The ResourceSync Simulator command line interface.

Created by Bernhard Haslhofer on 2012-04-02.
Copyright (c) 2012 resourcesync.org. All rights reserved.
"""

import optparse
import resyncsim

def main():
    # Define simulator options
    p = optparse.OptionParser(usage="%prog [options]", version="%prog 0.1")
    p.add_option('--resources', '-r', 
                    default=resyncsim.DEFAULT_RESOURCES,
                    type="int", help="the number of seed resources")
    p.add_option('--frequency', '-f', type="float",
                    default=resyncsim.DEFAULT_FREQUENCY,
                    help="the number of changes to be simulated per second")
    p.add_option('--event_types', '-t',
                    choices=resyncsim.EVENT_TYPES,
                    default=resyncsim.DEFAULT_EVENT_TYPES,
                    help="the types of change events to be fired (%s)" % 
                    resyncsim.EVENT_TYPES)
    p.add_option('--simulations', '-s', type="int",
                    default=resyncsim.DEFAULT_MAX_EVENTS,
                    help="the number of simulations to run (default: inf)")
    p.add_option('--publish', '-p', action="store_true",
                    help="publish events using registered publishers")
    p.add_option('--debug', '-d', action="store_true",
                    help="output inventory contents and changes")
    
    # Parse command line options and arguments
    options, arguments = p.parse_args()
    
    # Make sure that event type choice is a list
    event_types = options.event_types
    if isinstance(event_types, basestring):
        event_types = [event_types]
        
    # Initialize and bootstrap the inventory
    inventory = resyncsim.Inventory(options.resources)
    if options.debug is True:
        print inventory
    
    # Attach Web interface to inventory
    http_interface = resyncsim.HTTPInterface(inventory)
    http_interface.start()
    
    # Setup the simulator and
    simulator = resyncsim.Simulator(
                    inventory = inventory,
                    frequency = options.frequency, 
                    event_types = event_types,
                    max_events = options.simulations,
                    debug = options.debug)
    
    # ... attach registered publishers if requested so
    if options.publish is True:
        simulator.register_observer(resyncsim.XMPPBleeper())
        
    # ... run the simulation
    try:
        simulator.run()
    except KeyboardInterrupt:
        print "Exiting gracefully..."
    finally:
        http_interface.stop()


if __name__ == '__main__':
	main()