#!/usr/bin/env python
# encoding: utf-8
"""
rs-simulator: The ResourceSync Simulator command line interface.

Created by Bernhard Haslhofer on 2012-04-02.
Copyright (c) 2012 resourcesync.org. All rights reserved.
"""

import optparse
import yaml

import resyncsim

DEFAULT_CONFIG_FILE = 'config/default.yaml'

def main():
    
    # Define simulator options
    p = optparse.OptionParser(usage="%prog [options]", version="%prog 0.2")
    p.add_option('--config-file', '-c', 
                    default=DEFAULT_CONFIG_FILE,
                    help="the simulation configuration file")
    p.add_option('--port', '-p', type="int",
                    default=8080,
                    help="the HTTP interface port")
    
    # Parse command line options and arguments
    options, arguments = p.parse_args()
    
    # load the YAML configuration file
    stream = file(options.config_file, 'r')
    config = yaml.load(stream)
    
    # Set up the source
    source_settings = config['source']
    source = resyncsim.Source(source_settings)
    
    # Attach HTTP interface to source
    http_interface = resyncsim.HTTPInterface(source)
    
    # TODO: Set up and register inventory (if defined)
    
    # TODO: Set up and register change memory (if defined)
    
    # TODO: Set up and register publishers (if defined)
    
    # Attach event loggers;
    cmd_log = resyncsim.ConsoleEventLog()
    source.register_observer(cmd_log)
    
    # Start the Web interface, run the simulation
    try:
        http_interface.start()
        source.simulate_changes()
    except KeyboardInterrupt:
        print "Exiting gracefully..."
    finally:
         http_interface.stop()

    
    # Set up the repository
    
    # Make sure that event type choice is a list
    # event_types = options.event_types
    # if isinstance(event_types, basestring):
    #     event_types = [event_types]
        
    # Initialize and bootstrap the inventory
    # inventory = resyncsim.Inventory(options.resources)
    # if options.debug is True:
    #     print inventory
    
    # Attach Web interface to inventory
    # http_interface = resyncsim.HTTPInterface(inventory)
    # http_interface.start()
    
    # Setup the simulator and
    # simulator = resyncsim.Simulator(
    #                 inventory = inventory,
    #                 frequency = options.frequency, 
    #                 event_types = event_types,
    #                 max_events = options.simulations,
    #                 debug = options.debug)
    
    # ... attach registered publishers if requested so
    # if options.publish is True:
    #     simulator.register_observer(resyncsim.XMPPBleeper())
        
    # ... run the simulation
    # try:
    #     simulator.run()
    # except KeyboardInterrupt:
    #     print "Exiting gracefully..."
    # finally:
    #     http_interface.stop()


if __name__ == '__main__':
	main()