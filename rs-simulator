#!/usr/bin/env python
# encoding: utf-8
"""
rs-simulator: The ResourceSync command line tool for simulating a changing
data source.

Created by Bernhard Haslhofer on 2012-04-02.
Copyright (c) 2012 resourcesync.org. All rights reserved.
"""

import optparse
import yaml

import resyncsim

DEFAULT_CONFIG_FILE = 'config/default.yaml'

def main():
    
    # Define simulator options
    p = optparse.OptionParser(usage="%prog [options]", version="%prog 0.2")
    p.add_option('--config-file', '-c', 
                    default=DEFAULT_CONFIG_FILE,
                    help="the simulation configuration file")
    p.add_option('--port', '-p', type="int",
                    default=8080,
                    help="the HTTP interface port")
    
    # Parse command line options and arguments
    options, arguments = p.parse_args()
    
    # Load the YAML configuration file
    stream = file(options.config_file, 'r')
    config = yaml.load(stream)
    
    # Set up the source
    source_settings = config['source']
    source = resyncsim.Source(source_settings)
    
    # Attach HTTP interface to source
    http_interface = resyncsim.HTTPInterface(source)
    
    # Reflectively load, setup and register inventory (if defined)
    if config['inventory']:
        klass_name = config['inventory']['class']
        mod = __import__('resyncsim.inventory', fromlist=[klass_name])
        inventory_klass = getattr(mod, klass_name)
        inventory = inventory_klass(source, config['inventory'])
        http_interface.add_handler(inventory.handler)
    
    
    # TODO: Set up and register change memory (if defined)
    
    # Set up and register publishers (if defined)
    if config['publisher']:
        klass_name = config['publisher']['class']
        mod = __import__('resyncsim.publisher', fromlist=[klass_name])
        publisher_klass = getattr(mod, klass_name)
        publisher = publisher_klass(source, config['publisher'])
    
    # Attach event loggers;
    if config['logger']:
        klass_name = config['logger']['class']
        mod = __import__('resyncsim.event_log', fromlist=[klass_name])
        logger_class = getattr(mod, klass_name)
        logger = logger_class(source, config['logger'])
    
    # Start the Web interface, run the simulation
    try:
        http_interface.start()
        source.simulate_changes()
    except KeyboardInterrupt:
        print "Exiting gracefully..."
    finally:
        http_interface.stop()

if __name__ == '__main__':
	main()
	