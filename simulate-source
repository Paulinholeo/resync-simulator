#!/usr/bin/env python
# encoding: utf-8
"""
simulate-source: The ResourceSync command line tool for simulating a changing
data source.

Created by Bernhard Haslhofer on 2012-04-24.
Copyright 2012, ResourceSync.org. All rights reserved.
"""

import argparse
import yaml

import resync

DEFAULT_CONFIG_FILE = 'config/example.yaml'

def main():
    
    # Define simulator options
    parser = argparse.ArgumentParser(
                            description = "ResourceSync Source Simulator")
    parser.add_argument('--config-file', '-c', 
                    default=DEFAULT_CONFIG_FILE,
                    help="the simulation configuration file")
    parser.add_argument('--port', '-p', type=int,
                    default=8080,
                    help="the HTTP interface port")
    parser.add_argument('--hostname', '-n',
                    default="localhost",
                    help="the hostname where the simulator is running")
    
    # Parse command line arguments
    args = parser.parse_args()

    # Load the YAML configuration file
    stream = file(args.config_file, 'r')
    config = yaml.load(stream)
    
    # Set up the source
    source_settings = config['source']
    source = resync.Source(source_settings, args.hostname, args.port)
    
    # Attach HTTP interface to source
    http_interface = resync.HTTPInterface(source)
    
    # Reflectively load, setup and register inventory (if defined)
    if config['inventory']:
        klass_name = config['inventory']['class']
        mod = __import__('resync.inventory', fromlist=[klass_name])
        inventory_klass = getattr(mod, klass_name)
        inventory = inventory_klass(source, config['inventory'])
        http_interface.add_handlers(inventory.handlers)
    
    # Set up and register change memory (if defined)
    if config['changememory']:
        klass_name = config['changememory']['class']
        mod = __import__('resync.changememory', fromlist=[klass_name])
        changemem_klass = getattr(mod, klass_name)
        changemem = changemem_klass(source, config['changememory'])
        http_interface.add_handlers(changemem.handlers)
    
    # Set up and register publishers (if defined)
    if config['publisher']:
        klass_name = config['publisher']['class']
        mod = __import__('resync.publisher', fromlist=[klass_name])
        publisher_klass = getattr(mod, klass_name)
        publisher = publisher_klass(source, config['publisher'])
    
    # Attach event loggers;
    if config['logger']:
        klass_name = config['logger']['class']
        mod = __import__('resync.event_log', fromlist=[klass_name])
        logger_class = getattr(mod, klass_name)
        logger = logger_class(source, config['logger'])
    
    # Start the Web interface, run the simulation
    try:
        http_interface.start()
        source.simulate_changes()
    except KeyboardInterrupt:
        print "Exiting gracefully..."
    finally:
        http_interface.stop()

if __name__ == '__main__':
	main()
	