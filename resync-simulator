#!/usr/bin/env python
# encoding: utf-8
"""
resync-simulator: The ResourceSync command line tool for simulating a changing
Web data source.

Created by Bernhard Haslhofer on 2012-04-24.
Includes contributions by Simeon Warner
Copyright 2012-2013, ResourceSync.org. All rights reserved.
"""

import sys
import optparse
import yaml
import logging
import logging.config
import time

from resync_simulator.source import SourceRunner
from resync_simulator.http import HTTPInterface
from resync_simulator.pubsub import PubSubInterface
from resync_simulator.ws import WSInterface,ChangeNotificationHandler
import tornado.ioloop
from resync import ChangeList, Resource

DEFAULT_CONFIG_FILE = 'config/default.yaml'
DEFAULT_LOG_FILE = 'config/logging.yaml'

source = None #FIXME - how to get this to callback?
def sendEventsCallback():
    try:
        #print "source has %d changes" % len(source.changememory.changes)
        cl = source.changememory.generate_incremental()
        cl.pretty_xml = True
        cl.up = source.base_uri + "/capabilitylist.xml"
        if (cl and len(cl)>0):
            ChangeNotificationHandler.send_updates(cl.as_xml(),len(cl))
        #else:
        #    print "no updates"
    except Exception as e:
        print "oops " + str(e)

def main():

    # Define simulator options
    parser = optparse.OptionParser(description="ResourceSync Source Simulator")
    parser.add_option('--config-file', '-c',
                      default=DEFAULT_CONFIG_FILE,
                      help="the simulation configuration file")
    parser.add_option('--log-config', '-l',
                      default=DEFAULT_LOG_FILE,
                      help="the logging configuration file")
    parser.add_option('--port', type=int,
                      default=8888,
                      help="the HTTP interface port that the server will run on")
    parser.add_option('--base-uri', '-b',
                      default='',
                      help="the base URI where the simulator is running (defaults to localhost:port)")
    parser.add_option('--pubsub', '-p',
                      action='store_true',
                      help='also run PubSubHubbub interface')
    parser.add_option('--websockets', '-w',
                      action='store_true',
                      help='also run WebSockets interface')
    parser.add_option('--websockets-port', type=int,
                      default=8889,
                      help='the WebSockets interface port (defaults to 8889)')


    # Parse command line arguments
    (args, clargs) = parser.parse_args()

    # Load the logging configuration file and set up logging
    if sys.version_info >= (2, 7):
        # this stuff requires 2.7
        logconfig = yaml.load(file(args.log_config, 'r'))
        logging.config.dictConfig(logconfig)
    else:
        #FIXME - how ton configure for 2.6?
        #For now just enable simple logging if the flag was set
        if (args.log_config != DEFAULT_LOG_FILE):
            logging.basicConfig(format='%(asctime)s - %(name)18s - %(levelname)6s - %(message)s',
                                level=logging.INFO)

    # Load the YAML configuration file
    config = yaml.load(file(args.config_file, 'r'))

    # Set up the source
    source_settings = config['source']
    base_uri = args.base_uri
    if (base_uri == ''):
        base_uri = 'http://localhost:' + str(args.port)
    global source
    source_runner = SourceRunner(source_settings, base_uri, args.port)
    source = source_runner.source

    # Set up and register the source resource_list (if defined)
    if 'resource_list_builder' in config:
        klass_name = config['resource_list_builder']['class']
        mod = __import__('resync_simulator.source', fromlist=[klass_name])
        resource_list_builder_klass = getattr(mod, klass_name)
        builder = resource_list_builder_klass(source, config['resource_list_builder'])
        source.add_resource_list_builder(builder)

    # Set up and register change memory (if defined)
    if 'changememory' in config:
        klass_name = config['changememory']['class']
        mod = __import__('resync_simulator.changememory', fromlist=[klass_name])
        changemem_klass = getattr(mod, klass_name)
        changememory = changemem_klass(source, config['changememory'])
        source.add_changememory(changememory)

    # Bootstrap the source
    source.bootstrap()

    # Start the Web interface, run the simulation
    # Attach HTTP interface to source
    run_http = True
    run_ws = args.websockets
    run_pubsub = args.pubsub
    loop = tornado.ioloop.IOLoop.instance()
    if (run_pubsub):
        pubsub_interface = PubSubInterface(source)
        pubsub_interface.setup()
    if (run_http or run_pubsub):
        # Need web for pubsub
        http_interface = HTTPInterface(source)
        http_interface.setup()
    if (run_ws):
        ws_interface = WSInterface(source, port=args.websockets_port)
        notifier = tornado.ioloop.PeriodicCallback(sendEventsCallback, 5000, io_loop=loop)
    try:
        # Nastly kludge: we set up the ws system, then start the ioloop within
        # the HTTP interface that was designed to run in a separate thread. Better
        # strategy would be to rejig the source code so that the source simulation
        # runs in a separate thread and then use the main thread for all of the
        # tornado stuff
        if (run_ws):
            notifier.start()
        if (run_pubsub):
            pubsub_interface.start()
        source_runner.start()
        loop.start() #done in http
    except KeyboardInterrupt:
        print
        print "Simulator shutting down..."
    finally:
        loop.stop()
        source_runner.stop()
        if (run_pubsub):
            pubsub_interface.stop()
        if (run_ws):
            notifier.stop()
        # Wait for source to finish
        while (source_runner.is_alive() or pubsub_interface.is_alive()):
            time.sleep(2)
        #if (run_http):
        #    http_interface.stop()
        
    
    print "Simulator finished"

if __name__ == '__main__':
    main()
